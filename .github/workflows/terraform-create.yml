# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: 'Terraform Create'
env:
  AWS_DEFAULT_REGION: 'us-east-1'
  TF_VAR_ssh_public_key: ${{ secrets.TF_VAR_ssh_public_key }}
  TF_VAR_bkt: ${{ secrets.bkt }}

on:
  push:
    branches:
      - main     # Trigger on push to the main branch (for production)
      - develop  # Trigger on push to the develop branch (for staging)
  pull_request:

jobs:
  set-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-environment.outputs.environment }}
      aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set environment dynamically
        id: set-environment
        run: |
          if [ "${GITHUB_REF}" == "refs/heads/main" ]; then
            echo "::set-output name=environment::production"  # Set output for the next jobs
          elif [ "${GITHUB_REF}" == "refs/heads/develop" ]; then
            echo "::set-output name=environment::dev"  # Set output for the next jobs
          else
            echo "::set-output name=environment::unknown"  # Set output for the next jobs
          fi

      - name: Print the environment value
        run: echo "Environment set to ${{ steps.set-environment.outputs.environment }}"

  terraform_validate:
    name: 'Terraform Init'
    needs: set-environment
    runs-on: ubuntu-latest
    environment: ${{ needs.set-environment.outputs.environment }}
    env:
      AWS_ACCESS_KEY_ID: ${{ needs.set-environment.outputs.aws_access_key_id }}
      AWS_SECRET_ACCESS_KEY: ${{ needs.set-environment.outputs.aws_secret_access_key }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'
        
      - name: Terraform Init
        run: terraform init 
        
      - name: Terraform fmt
        run: terraform fmt

      - name: Terraform Validate
        run: terraform validate

  terraform_plan:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    needs: [set-environment, terraform_validate]  # Ensure this job runs after the init job
    environment: ${{ needs.set-environment.outputs.environment }}
    env:
      AWS_ACCESS_KEY_ID: ${{ needs.set-environment.outputs.aws_access_key_id }}
      AWS_SECRET_ACCESS_KEY: ${{ needs.set-environment.outputs.aws_secret_access_key }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'
       
      - name: Terraform Init
        run: terraform init 

      - name: Terraform Plan
        run: terraform plan 

  terraform_apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: [set-environment, terraform_plan]  # Ensure this job runs after the plan job
    environment: ${{ needs.set-environment.outputs.environment }}
    env:
      AWS_ACCESS_KEY_ID: ${{ needs.set-environment.outputs.aws_access_key_id }}
      AWS_SECRET_ACCESS_KEY: ${{ needs.set-environment.outputs.aws_secret_access_key }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Terraform Init
        run: terraform init 

      - name: Terraform Plan
        run: terraform plan 

      - name: Terraform Apply
        run: terraform apply -auto-approve
